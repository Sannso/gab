---
interface Props {
    name: string;
}

const { name } = Astro.props;
const categorias = ["Streaming", "Skin Care"];
---

<div
    id="user-card"
    class={`relative flex flex-col justify-between w-full lg:w-56 h-56
            bg-white border-2 border-gray-800 
            rounded-xl p-5 shadow-[2.8px_4px_0px_rgba(0,0,0,1)]
            lg:user-animations`}
>
    <h1
        class="lg:absolute text-2xl font-extrabold -tracking-wider text-pretty font-LexendMega"
    >
        {name}
    </h1>

    <div id="user-card-categories" class={`flex flex-col gap-2 
                    lg:absolute lg:top-60 lg:left-0 lg:w-full lg:items-center
                    lg:opacity-0`}>
        <h2 class="font-bold text-lg font-LexendMega -tracking-wider text-pretty">Categorias</h2>
        <div class="flex lg:flex-col gap-5">
            {categorias.map((categoria) => (
                <div class="flex flex-col border-2 border-black rounded-lg px-2 py-.5">
                    <h3 class="font-bold text-2xl font-BebasKai tracking-wider text-pretty">{categoria}</h3>
                </div>
            ))}
        </div>
    </div>
</div>

<style>
    .user-animations {
        &:hover {
            animation: hoverAnimation 0.5s cubic-bezier(0.61, 0.03, 0.08, 0.8)
                both;
        }
    }

    .user-animations-reverse {
        animation: hoverAnimationReverse 0.5s
            cubic-bezier(0.61, 0.03, 0.08, 0.8) both;
    }

    .user-expand {
        animation: hoverAnimation 0.5s cubic-bezier(0.61, 0.03, 0.08, 0.8)
            forwards;
    }

    .user-category-animation-entry{
        @apply lg:opacity-100 lg:transition-all lg:duration-500 lg:delay-200 lg:ease-in-out;
    }
    
    .user-category-animation-exit{
        @apply lg:opacity-0 lg:transition-all lg:duration-200 lg:ease-in-out;
    }

    @keyframes hoverAnimation {
        50% {
            transform: translateX(2.8px) translateY(4px);
            box-shadow: none;
            @apply h-56;
        }
        100% {
            transform: translateX(2.8px) translateY(4px);
            box-shadow: none;
            @apply h-full;
        }
    }

    @keyframes hoverAnimationReverse {
        0% {
            transform: translateX(2.8px) translateY(4px);
            box-shadow: none;
            @apply h-full;
        }

        50% {
            transform: translateX(2.8px) translateY(4px);
            box-shadow: none;
            @apply h-56;
        }

        100% {
            transform: translateX(0px) translateY(0px);
            @apply shadow-[2.8px_4px_0px_rgba(0,0,0,1)];
            @apply h-56;
        }
    }
</style>

<script>
    const userCard = document.querySelector("#user-card");
    const userCardCategories = document.querySelector("#user-card-categories");

    userCard!.addEventListener("mouseover", () => {
        if (window.innerWidth > 700) {
            userCard!.classList.add("user-animations");
            userCard!.classList.remove("user-animations-reverse");
            userCardCategories!.classList.add("user-category-animation-entry");
            userCardCategories!.classList.remove("user-category-animation-exit");
        }
    });

    userCard!.addEventListener("mouseout", () => {
        if (window.innerWidth > 700) {
            userCard!.classList.add("user-animations-reverse");
            userCard!.classList.remove("user-animations");
            userCard!.classList.remove("user-expand");
            userCardCategories!.classList.add("user-category-animation-exit");
            userCardCategories!.classList.remove("user-category-animation-entry");
        }
    });

    userCard!.addEventListener("click", () => {
        if (window.innerWidth > 700) {
            userCard!.classList.remove("user-animations-reverse");
            userCard!.classList.add("user-expand");

            //Animations for categories
            userCardCategories!.classList.add("user-category-animation-entry");
            userCardCategories!.classList.remove("user-category-animation-exit");
        }
    });
</script>
